@page "/register"
@using EventManagerFrontend.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using System.Text.Json
@inject IJSRuntime JsRuntime

<PageTitle>Register</PageTitle>
<h3>Register</h3>

@if (submitResult != null)
{
    <p>@submitResult</p>
}

<div class="container">
    <div class="register-form-card">
        <form @onsubmit="HandleSubmit">
            <div class="form-group">
                <label>Name:</label>
                <input type="text" @bind="newUser.Name" class="form-control" />
            </div>
            <div class="form-group">
                <label>Email:</label>
                <input type="email" @bind="newUser.Email" class="form-control" />
            </div>
            <div class="form-group">
                <label>Password:</label>
                <input type="password" @bind="newUser.Password" class="form-control" />
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </form>
    </div>
</div>

<style>
    .container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
    }

    .register-form-card {
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
        background-color: #fff;
        width: 400px;
    }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

    .form-control {
        width: 100%;
        padding: 8px;
        box-sizing: border-box;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .btn {
        display: inline-block;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        text-align: center;
        text-decoration: none;
        outline: none;
        color: #fff;
        background-color: #007bff;
        border: none;
        border-radius: 5px;
        box-shadow: 0 2px #999;
    }

        .btn:hover {
            background-color: #0056b3
        }

        .btn:active {
            background-color: #0056b3;
            box-shadow: 0 2px #666;
            transform: translateY(2px);
        }
</style>

@code {
    private User newUser = new User();
    private string submitResult;

    private async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(newUser.Name))
        {
            await JsRuntime.InvokeVoidAsync("alert", "Username required.");
            return;
        }
        if (string.IsNullOrWhiteSpace(newUser.Email))
        {
            await JsRuntime.InvokeVoidAsync("alert", "Email required.");
            return;
        }
        if (string.IsNullOrWhiteSpace(newUser.Password))
        {
            await JsRuntime.InvokeVoidAsync("alert", "Password required.");
            return;
        }

        newUser.TypeId = 1;
        newUser.Id = Guid.NewGuid();

        try
        {
            var response = await Http.PostAsJsonAsync("/User/add", newUser);
            response.EnsureSuccessStatusCode();
            await JsRuntime.InvokeVoidAsync("alert", "Successfully registered!");
            NavigationManager.NavigateTo("/events");
        }
        catch (Exception ex)
        {
            submitResult = $"Try again: {ex.Message}";
        }
    }
}
